#!/bin/bash

echo "üöÄ Deployment de Soluci√≥n de Notificaciones"
echo "==========================================="
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 1. Compilar el backend
echo -e "${YELLOW}üì¶ Paso 1: Compilando el backend...${NC}"
cd /home/victalejo/tradeoptix-back
go build -o bin/tradeoptix-server cmd/server/main.go

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Backend compilado exitosamente${NC}"
else
    echo -e "${RED}‚ùå Error al compilar el backend${NC}"
    exit 1
fi
echo ""

# 2. Verificar que el binario existe
echo -e "${YELLOW}üîç Paso 2: Verificando binario...${NC}"
if [ -f "bin/tradeoptix-server" ]; then
    echo -e "${GREEN}‚úÖ Binario encontrado${NC}"
    ls -lh bin/tradeoptix-server
else
    echo -e "${RED}‚ùå Binario no encontrado${NC}"
    exit 1
fi
echo ""

# 3. Detener el servidor actual (si est√° ejecut√°ndose)
echo -e "${YELLOW}üõë Paso 3: Deteniendo servidor actual...${NC}"
pkill tradeoptix-server 2>/dev/null
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Servidor detenido${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No hab√≠a servidor ejecut√°ndose${NC}"
fi
sleep 2
echo ""

# 4. Verificar configuraci√≥n
echo -e "${YELLOW}‚öôÔ∏è  Paso 4: Verificando configuraci√≥n...${NC}"
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ Archivo .env encontrado${NC}"
    echo "Configuraci√≥n de base de datos:"
    cat .env | grep -E "DB_HOST|DB_USER|DB_NAME" | sed 's/^/  /'
else
    echo -e "${RED}‚ùå Archivo .env no encontrado${NC}"
    exit 1
fi
echo ""

# 5. Iniciar el servidor
echo -e "${YELLOW}üöÄ Paso 5: Iniciando servidor...${NC}"
nohup ./bin/tradeoptix-server > server.log 2>&1 &
SERVER_PID=$!
echo "PID del servidor: $SERVER_PID"
sleep 3

# Verificar que el servidor est√© ejecut√°ndose
if ps -p $SERVER_PID > /dev/null; then
    echo -e "${GREEN}‚úÖ Servidor iniciado correctamente${NC}"
else
    echo -e "${RED}‚ùå Error al iniciar el servidor${NC}"
    echo "√öltimas l√≠neas del log:"
    tail -20 server.log
    exit 1
fi
echo ""

# 6. Verificar las rutas
echo -e "${YELLOW}üîç Paso 6: Verificando rutas...${NC}"
sleep 2
HEALTH_CHECK=$(curl -s http://localhost:8080/health)
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Health check exitoso: $HEALTH_CHECK${NC}"
else
    echo -e "${RED}‚ùå Health check fall√≥${NC}"
    exit 1
fi
echo ""

# 7. Verificar que la nueva ruta est√© disponible
echo -e "${YELLOW}üîç Paso 7: Verificando nueva ruta /send-push...${NC}"
grep -q "notifications/:id/send-push" server.log
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Ruta /send-push registrada correctamente${NC}"
    grep "notifications/:id/send-push" server.log | tail -1
else
    echo -e "${RED}‚ùå Ruta /send-push no encontrada en los logs${NC}"
fi
echo ""

# 8. Mostrar todas las rutas de notificaciones
echo -e "${YELLOW}üìã Rutas de notificaciones disponibles:${NC}"
grep "notifications" server.log | grep -E "POST|GET|PUT|DELETE" | sed 's/^/  /'
echo ""

# 9. Resumen final
echo "==========================================="
echo -e "${GREEN}‚úÖ DEPLOYMENT COMPLETADO${NC}"
echo "==========================================="
echo ""
echo "üìä Informaci√≥n del servidor:"
echo "  - PID: $SERVER_PID"
echo "  - Puerto: 8080"
echo "  - Log: server.log"
echo ""
echo "üß™ Para probar la nueva funcionalidad, ejecuta:"
echo "  ./test_send_push_final.sh"
echo ""
echo "üìù Ver logs en tiempo real:"
echo "  tail -f server.log"
echo ""
